{"name":"CommonRepo","tagline":"Common Repository","body":"Common Repository\r\n==============================\r\n\r\nCommon Repository\r\n\r\n\r\nLICENSE: Apache License 2.0\r\n\r\nSettings\r\n------------\r\n\r\nCommon Repository relies extensively on environment settings which **will not work with Apache/mod_wsgi setups**. It has been deployed successfully with both Gunicorn/Nginx and even uWSGI/Nginx.\r\n\r\nFor configuration purposes, the following table maps the 'Common Repository' environment variables to their Django setting:\r\n\r\n======================================= =========================== ============================================== ======================================================================\r\nEnvironment Variable                    Django Setting              Development Default                            Production Default\r\n======================================= =========================== ============================================== ======================================================================\r\nDJANGO_CACHES                           CACHES (default)            locmem                                         redis\r\nDJANGO_DATABASES                        DATABASES (default)         See code                                       See code\r\nDJANGO_DEBUG                            DEBUG                       True                                           False\r\nDJANGO_SECRET_KEY                       SECRET_KEY                  CHANGEME!!!                                    raises error\r\nDJANGO_SECURE_BROWSER_XSS_FILTER        SECURE_BROWSER_XSS_FILTER   n/a                                            True\r\nDJANGO_SECURE_SSL_REDIRECT              SECURE_SSL_REDIRECT         n/a                                            True\r\nDJANGO_SECURE_CONTENT_TYPE_NOSNIFF      SECURE_CONTENT_TYPE_NOSNIFF n/a                                            True\r\nDJANGO_SECURE_FRAME_DENY                SECURE_FRAME_DENY           n/a                                            True\r\nDJANGO_SECURE_HSTS_INCLUDE_SUBDOMAINS   HSTS_INCLUDE_SUBDOMAINS     n/a                                            True\r\nDJANGO_SESSION_COOKIE_HTTPONLY          SESSION_COOKIE_HTTPONLY     n/a                                            True\r\nDJANGO_SESSION_COOKIE_SECURE            SESSION_COOKIE_SECURE       n/a                                            False\r\nDJANGO_DEFAULT_FROM_EMAIL               DEFAULT_FROM_EMAIL          n/a                                            \"Common Repository <noreply@commonrepo.tw>\"\r\nDJANGO_SERVER_EMAIL                     SERVER_EMAIL                n/a                                            \"Common Repository <noreply@commonrepo.tw>\" \r\nDJANGO_EMAIL_SUBJECT_PREFIX             EMAIL_SUBJECT_PREFIX        n/a                                            \"[Common Repository] \"\r\n======================================= =========================== ============================================== ======================================================================\r\n\r\nThe following table lists settings and their defaults for third-party applications:\r\n\r\n======================================= =========================== ============================================== ======================================================================\r\nEnvironment Variable                    Django Setting              Development Default                            Production Default\r\n======================================= =========================== ============================================== ======================================================================\r\nDJANGO_AWS_ACCESS_KEY_ID                AWS_ACCESS_KEY_ID           n/a                                            raises error\r\nDJANGO_AWS_SECRET_ACCESS_KEY            AWS_SECRET_ACCESS_KEY       n/a                                            raises error\r\nDJANGO_AWS_STORAGE_BUCKET_NAME          AWS_STORAGE_BUCKET_NAME     n/a                                            raises error\r\nDJANGO_SENTRY_DSN                       SENTRY_DSN                  n/a                                            raises error\r\nDJANGO_SENTRY_CLIENT                    SENTRY_CLIENT               n/a                                            raven.contrib.django.raven_compat.DjangoClient\r\nDJANGO_SENTRY_LOG_LEVEL                 SENTRY_LOG_LEVEL            n/a                                            logging.INFO\r\nDJANGO_MAILGUN_API_KEY                  MAILGUN_ACCESS_KEY          n/a                                            raises error\r\nDJANGO_MAILGUN_SERVER_NAME              MAILGUN_SERVER_NAME         n/a                                            raises error\r\n======================================= =========================== ============================================== ======================================================================\r\n\r\nGetting up and running\r\n----------------------\r\n\r\nBasics\r\n^^^^^^\r\n\r\nThe steps below will get you up and running with a local development environment. We assume you have the following installed:\r\n\r\n* pip\r\n* virtualenv\r\n* PostgreSQL\r\n\r\nFirst make sure to create and activate a virtualenv_, then open a terminal at the project root and install the requirements for local development::\r\n\r\n    $ pip install -r requirements/local.txt\r\n\r\n.. _virtualenv: http://docs.python-guide.org/en/latest/dev/virtualenvs/\r\n\r\nCreate a local PostgreSQL database::\r\n\r\n    $ createdb commonrepo\r\n\r\nRun ``migrate`` on your new database::\r\n\r\n    $ python manage.py migrate\r\n\r\nYou can now run the ``runserver_plus`` command::\r\n\r\n    $ python manage.py runserver_plus\r\n\r\nOpen up your browser to http://127.0.0.1:8000/ to see the site running locally.\r\n\r\nSetting Up Your Users\r\n^^^^^^^^^^^^^^^^^^^^^\r\n\r\nTo create a **normal user account**, just go to Sign Up and fill out the form. Once you submit it, you'll see a \"Verify Your E-mail Address\" page. Go to your console to see a simulated email verification message. Copy the link into your browser. Now the user's email should be verified and ready to go.\r\n\r\nTo create an **superuser account**, use this command::\r\n\r\n    $ python manage.py createsuperuser\r\n\r\nFor convenience, you can keep your normal user logged in on Chrome and your superuser logged in on Firefox (or similar), so that you can see how the site behaves for both kinds of users.\r\n\r\nTest coverage\r\n^^^^^^^^^^^^^\r\n\r\nTo run the tests, check your test coverage, and generate an HTML coverage report::\r\n\r\n    $ coverage run manage.py test\r\n    $ coverage html\r\n    $ open htmlcov/index.html\r\n\r\nLive reloading and Sass CSS compilation\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nIf you'd like to take advantage of live reloading and Sass / Compass CSS compilation you can do so with a little bit of prep work.\r\n\r\nMake sure that nodejs_ is installed. Then in the project root run::\r\n\r\n    $ npm install\r\n\r\n.. _nodejs: http://nodejs.org/download/\r\n\r\nIf you don't already have it, install `compass` (doesn't hurt if you run this command twice)::\r\n\r\n    gem install compass\r\n\r\nNow you just need::\r\n\r\n    $ grunt serve\r\n\r\nThe base app will now run as it would with the usual ``manage.py runserver`` but with live reloading and Sass compilation enabled.\r\n\r\nTo get live reloading to work you'll probably need to install an `appropriate browser extension`_\r\n\r\n.. _appropriate browser extension: http://feedback.livereload.com/knowledgebase/articles/86242-how-do-i-install-and-use-the-browser-extensions-\r\n\r\n\r\nCelery\r\n^^^^^^\r\nThis app comes with Celery.\r\n\r\nTo run a celery worker:\r\n\r\n.. code-block:: bash\r\n\r\n    cd commonrepo\r\n    celery -A commonrepo.taskapp worker -l info\r\n\r\nPlease note: For Celerys import magic to work, it is important *where* the celery commands are run. If you are in the same folder with *manage.py*, you should be right.\r\n\r\n\r\nEmail Server\r\n^^^^^^^^^^^^\r\n\r\nIn development, it is often nice to be able to see emails that are being sent from your application. For this purpose,\r\na Grunt task exists to start an instance of `maildump`_ which is a local SMTP server with an online interface.\r\n\r\n.. _maildump: https://github.com/ThiefMaster/maildump\r\n\r\nMake sure you have nodejs installed, and then type the following::\r\n\r\n    $ grunt start-email-server\r\n\r\nThis will start an email server. The project is setup to deliver to the email server by default. To view messages\r\nthat are sent by your application, open your browser to http://127.0.0.1:1080\r\n\r\nTo stop the email server::\r\n\r\n    $ grunt stop-email-server\r\n\r\nThe email server listens on 127.0.0.1:1025\r\n\r\n\r\nSentry\r\n^^^^^^\r\n\r\nSentry is an error logging aggregator service. You can sign up for a free account at http://getsentry.com or download and host it yourself.\r\nThe system is setup with reasonable defaults, including 404 logging and integration with the WSGI application.\r\n\r\nYou must set the DSN url in production.\r\n\r\n\r\nIt's time to write the code!!!\r\n\r\n\r\nRunning end to end integration tests\r\n------------------------------------\r\n\r\nN.B. The integration tests will not run on Windows.\r\n\r\nTo install the test runner::\r\n\r\n  $ pip install hitch\r\n\r\nTo run the tests, enter the commonrepo/tests directory and run the following commands::\r\n\r\n  $ hitch init\r\n\r\nThen run the stub test::\r\n\r\n  $ hitch test stub.test\r\n\r\nThis will download and compile python, postgres and redis and install all python requirements so the first time it runs it may take a while.\r\n\r\nSubsequent test runs will be much quicker.\r\n\r\nThe testing framework runs Django, Celery (if enabled), Postgres, HitchSMTP (a mock SMTP server), Firefox/Selenium and Redis.\r\n\r\n\r\nDeployment\r\n----------\r\n\r\nIt is possible to deploy to Heroku, to your own server by using Dokku, an open source Heroku clone or using docker-compose.\r\n\r\nHeroku\r\n^^^^^^\r\n\r\nRun these commands to deploy the project to Heroku:\r\n\r\n.. code-block:: bash\r\n\r\n    heroku create --buildpack https://github.com/heroku/heroku-buildpack-python\r\n\r\n    heroku addons:create heroku-postgresql:hobby-dev\r\n    heroku pg:backups schedule --at '02:00 America/Los_Angeles' DATABASE_URL\r\n    heroku pg:promote DATABASE_URL\r\n\r\n    heroku addons:create heroku-redis:hobby-dev\r\n    heroku addons:create mailgun\r\n\r\n    heroku config:set DJANGO_SECRET_KEY=`openssl rand -base64 32`\r\n    heroku config:set DJANGO_SETTINGS_MODULE='config.settings.production'\r\n\r\n    heroku config:set DJANGO_AWS_ACCESS_KEY_ID=YOUR_AWS_ID_HERE\r\n    heroku config:set DJANGO_AWS_SECRET_ACCESS_KEY=YOUR_AWS_SECRET_ACCESS_KEY_HERE\r\n    heroku config:set DJANGO_AWS_STORAGE_BUCKET_NAME=YOUR_AWS_S3_BUCKET_NAME_HERE\r\n\r\n    heroku config:set DJANGO_MAILGUN_SERVER_NAME=YOUR_MALGUN_SERVER\r\n    heroku config:set DJANGO_MAILGUN_API_KEY=YOUR_MAILGUN_API_KEY\r\n    \r\n    heroku config:set PYTHONHASHSEED=random\r\n    \r\n    git push heroku master\r\n    heroku run python manage.py migrate\r\n    heroku run python manage.py check --deploy\r\n    heroku run python manage.py createsuperuser\r\n    heroku open\r\n\r\nDokku\r\n^^^^^\r\n\r\nYou need to make sure you have a server running Dokku with at least 1GB of RAM. Backing services are\r\nadded just like in Heroku however you must ensure you have the relevant Dokku plugins installed.\r\n\r\n.. code-block:: bash\r\n\r\n    cd /var/lib/dokku/plugins\r\n    git clone https://github.com/rlaneve/dokku-link.git link\r\n    git clone https://github.com/luxifer/dokku-redis-plugin redis\r\n    git clone https://github.com/jezdez/dokku-postgres-plugin postgres\r\n    dokku plugins-install\r\n\r\nYou can specify the buildpack you wish to use by creating a file name .env containing the following.\r\n\r\n.. code-block:: bash\r\n\r\n    export BUILDPACK_URL=<repository>\r\n\r\nYou can then deploy by running the following commands.\r\n\r\n..  code-block:: bash\r\n\r\n    git remote add dokku dokku@yourservername.com:commonrepo\r\n    git push dokku master\r\n    ssh -t dokku@yourservername.com dokku redis:create commonrepo-redis\r\n    ssh -t dokku@yourservername.com dokku redis:link commonrepo-redis commonrepo\r\n    ssh -t dokku@yourservername.com dokku postgres:create commonrepo-postgres\r\n    ssh -t dokku@yourservername.com dokku postgres:link commonrepo-postgres commonrepo\r\n    ssh -t dokku@yourservername.com dokku config:set commonrepo DJANGO_SECRET_KEY=RANDOM_SECRET_KEY_HERE\r\n    ssh -t dokku@yourservername.com dokku config:set commonrepo DJANGO_SETTINGS_MODULE='config.settings.production'\r\n    ssh -t dokku@yourservername.com dokku config:set commonrepo DJANGO_AWS_ACCESS_KEY_ID=YOUR_AWS_ID_HERE\r\n    ssh -t dokku@yourservername.com dokku config:set commonrepo DJANGO_AWS_SECRET_ACCESS_KEY=YOUR_AWS_SECRET_ACCESS_KEY_HERE\r\n    ssh -t dokku@yourservername.com dokku config:set commonrepo DJANGO_AWS_STORAGE_BUCKET_NAME=YOUR_AWS_S3_BUCKET_NAME_HERE\r\n    ssh -t dokku@yourservername.com dokku config:set commonrepo DJANGO_MAILGUN_API_KEY=YOUR_MAILGUN_API_KEY\r\n    ssh -t dokku@yourservername.com dokku config:set commonrepo DJANGO_MAILGUN_SERVER_NAME=YOUR_MAILGUN_SERVER\r\n    ssh -t dokku@yourservername.com dokku run commonrepo python manage.py migrate\r\n    ssh -t dokku@yourservername.com dokku run commonrepo python manage.py createsuperuser\r\n\r\nWhen deploying via Dokku make sure you backup your database in some fashion as it is NOT done automatically.\r\n\r\nDocker\r\n^^^^^^\r\n\r\n**Warning**\r\n\r\nDocker is evolving extremely fast, but it has still some rough edges here and there. Compose is currently (as of version 1.4)\r\nnot considered production ready. That means you won't be able to scale to multiple servers and you won't be able to run\r\nzero downtime deployments out of the box. Consider all this as experimental until you understand all the  implications\r\nto run docker (with compose) on production.\r\n\r\n**Run your app with docker-compose**\r\n\r\nPrerequisites:\r\n\r\n* docker (tested with 1.8)\r\n* docker-compose (tested with 0.4)\r\n\r\nBefore you start, check out the `docker-compose.yml` file in the root of this project. This is where each component\r\nof this application gets its configuration from. It consists of a `postgres` service that runs the database, `redis`\r\nfor caching, `nginx` as reverse proxy and last but not least the `django` application run by gunicorn.\r\nSince this application also runs Celery, there are two more services with a service called `celeryworker` that runs the\r\ncelery worker process and `celerybeat` that runs the celery beat process.\r\n\r\n\r\n\r\nAll of these services except `redis` rely on environment variables set by you. There is an `env.example` file in the\r\nroot directory of this project as a starting point. Add your own variables to the file and rename it to `.env`. This\r\nfile won't be tracked by git by default so you'll have to make sure to use some other mechanism to copy your secret if\r\nyou are relying solely on git.\r\n\r\n\r\nBy default, the application is configured to listen on all interfaces on port 80. If you want to change that, open the\r\n`docker-compose.yml` file and replace `0.0.0.0` with your own ip. If you are using `nginx-proxy`_ to run multiple\r\napplication stacks on one host, remove the port setting entirely and add `VIRTUAL_HOST=commonrepo.tw` to your env file.\r\nThis pass all incoming requests on `nginx-proxy` to the nginx service your application is using.\r\n\r\n.. _nginx-proxy: https://github.com/jwilder/nginx-proxy\r\n\r\nPostgres is saving its database files to `/data/commonrepo/postgres` by default. Change that if you wan't\r\nsomething else and make sure to make backups since this is not done automatically.\r\n\r\nTo get started, pull your code from source control (don't forget the `.env` file) and change to your projects root\r\ndirectory.\r\n\r\nYou'll need to build the stack first. To do that, run::\r\n\r\n    docker-compose build\r\n\r\nOnce this is ready, you can run it with::\r\n\r\n    docker-compose up\r\n\r\n\r\nTo run a migration, open up a second terminal and run::\r\n\r\n   docker-compose run django python manage.py migrate\r\n\r\nTo create a superuser, run::\r\n\r\n   docker-compose run django python manage.py createsuperuser\r\n\r\n\r\nIf you need a shell, run::\r\n\r\n   docker-compose run django python manage.py shell_plus\r\n\r\n\r\nOnce you are ready with your initial setup, you wan't to make sure that your application is run by a process manager to\r\nsurvive reboots and auto restarts in case of an error. You can use the process manager you are most familiar with. All\r\nit needs to do is to run `docker-compose up` in your projects root directory.\r\n\r\nIf you are using `supervisor`, you can use this file as a starting point::\r\n\r\n    [program:commonrepo]\r\n    command=docker-compose up\r\n    directory=/path/to/commonrepo\r\n    redirect_stderr=true\r\n    autostart=true\r\n    autorestart=true\r\n    priority=10\r\n\r\n\r\nPlace it in `/etc/supervisor/conf.d/commonrepo.conf` and run::\r\n\r\n    supervisorctl reread\r\n    supervisorctl start commonrepo\r\n\r\n\r\n\r\nTo get the status, run::\r\n\r\n    supervisorctl status\r\n\r\nIf you have errors, you can always check your stack with `docker-compose`. Switch to your projects root directory and run::\r\n\r\n    docker-compose ps\r\n\r\n\r\nto get an output of all running containers.\r\n\r\nTo check your logs, run::\r\n\r\n    docker-compose logs\r\n\r\nIf you want to scale your application, run::\r\n\r\n    docker-compose scale django=4\r\n    docker-compose scale celeryworker=2\r\n\r\n\r\n**Don't run the scale command on postgres or celerybeat**\r\n","google":"UA-71965843-2","note":"Don't delete this file! It's used internally to help with page regeneration."}
